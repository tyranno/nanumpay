================================================================================
                           MLM 시스템 데이터베이스 구조
================================================================================

1. 컬렉션 구조
================================================================================

1.1 admins 컬렉션 (관리자 전용)
  - 용도: 관리자 인증 및 시스템 최상위 노드
  - 특징:
    * 시스템의 유일한 최상위 존재
    * 이진트리 구조에 포함되지 않음 (등급 없음)
    * 매출 계산에서 제외
    * ObjectId를 통해 최상위 용역자들의 부모로 참조됨

1.2 users 컬렉션 (용역자 전용)
  - 용도: 일반 용역자 관리
  - 특징:
    * 모든 용역자는 반드시 부모를 가짐 (관리자 또는 다른 용역자)
    * 이진트리 구조로 연결 (한 부모당 최대 2명 자식)
    * parentId에 Admin ObjectId 또는 User loginId 저장
    * 등급(F1~F8) 자동 계산

1.3 monthlyrevenues 컬렉션 (월별 매출)
  - 용도: 월별 총매출 및 등급별 분포 관리
  - 주요 필드:
    * month: "2024-09"
    * totalRevenue: 총매출액
    * userCount: 신규 등록 인원
    * gradeDistribution: {F1: 50, F2: 10, ...}

1.4 userpaymentplans 컬렉션 (개인별 지급 계획)
  - 용도: 매출월별 개인 지급 계획 및 상태 관리
  - 구조: 1인당 매출월별 1개 문서
  - 주요 필드:
    * userId: 용역자 loginId
    * revenueMonth: "2024-09" (매출 발생월)
    * grade: 매출 시점 등급
    * totalAmount: 총 지급액
    * installmentAmount: 회차당 지급액
    * payments: [
        {
          installment: 회차 (1~10),
          scheduledWeek: "2024-10-W1",
          amount: 회차별 지급액,
          status: "pending" | "paid",
          paidDate: 실제 지급일,
          transactionId: 거래번호
        }
      ]

1.5 weeklypayments 컬렉션 (주간 지급 실행)
  - 용도: 실제 지급 실행 내역
  - 주요 필드:
    * week: "2024-10-W1"
    * userId: 용역자 loginId
    * totalAmount: 주간 총 지급액
    * withholdingTax: 원천징수액 (3.3%)
    * netAmount: 실지급액

2. 등록 프로세스
================================================================================

2.1 엑셀 일괄 등록
  - 헤더 형식:
    순번, 날짜, 성명, 연락처, 주민번호, 은행, 계좌번호,
    판매인, 연락처, 설계사, 연락처, 보험상품명, 보험회사, 지사

  - 처리 방식:
    1단계) 판매인이 "관리자"인 용역자 등록 (parentId = Admin ObjectId)
    2단계) 판매인이 기존 용역자인 경우 등록 (parentId = 해당 용역자 loginId)

  - 자동 생성 필드:
    * loginId: 한글이름 (중복시 A,B,C 순차 추가)
    * password: 전화번호 뒷 4자리
    * position: 부모의 leftChild가 비어있으면 'L', 아니면 'R'
    * grade: 등록 후 자동 계산

2.2 개별 등록
  - 관리자 페이지에서 수동 등록
  - 엑셀 등록과 동일한 규칙 적용

2.3 등록 제약사항
  - 한 부모는 최대 2명의 자식만 가능 (이진트리 구조)
  - 자식 초과 시 경고 알림 발생
  - 여러 엑셀 파일 등록 시 기존 DB 구조 유지

2.4 배치 처리 최적화
  - 개별 처리 대신 벌크 연산 사용
  - 전체 트리 한 번 로드 후 메모리에서 계산
  - bulkWrite, insertMany 활용
  - 트랜잭션으로 데이터 일관성 보장

3. 계층 구조
================================================================================

        관리자 (Admin - 최상위, 등급 없음)
              |
     +--------+--------+
     |                 |
  용역자A(F?)       용역자B(F?)     <- parentId = Admin ObjectId
     |                 |
  +--+--+          +--+--+
  |     |          |     |
용역자C  용역자D  용역자E  용역자F   <- parentId = 부모의 loginId

4. 참조 관계
================================================================================

4.1 부모 참조 (parentId)
  - 최상위 용역자: Admin의 ObjectId
  - 일반 용역자: 부모 User의 loginId (문자열)

4.2 자식 참조
  - leftChildId: 왼쪽 자식의 loginId
  - rightChildId: 오른쪽 자식의 loginId

5. 자동 계산 시스템
================================================================================

5.1 등급 계산
  - 이진트리 구조 기반 F1~F8 등급 자동 계산
  - 하위 전체 서브트리 구조 반영
  - 등급 규칙:
    * F1: 자식 0개 또는 1개
    * F2: 좌우 자식 모두 있음
    * F3: 좌우 서브트리에 각각 F2가 1개씩
    * F4: 좌우 서브트리에 각각 F3가 1개씩
    * F5~F8: 하위 등급이 2:1 또는 1:2 비율

5.2 매출 계산
  - 용역자만 포함 (관리자 제외)
  - 신규 등록 인원 × 100만원 (10만원의 10배)
  - 매월 말 자동 집계

5.3 지급액 계산
  - 등급별 비율:
    F1: 24%, F2: 19%, F3: 14%, F4: 9%,
    F5: 5%, F6: 3%, F7: 2%, F8: 1%
  - 누적식 배분:
    * F1: (총매출×24%) ÷ (F1+F2인원)
    * F2: F1지급액 + (총매출×19%) ÷ (F2+F3인원)
    * F3: F2지급액 + (총매출×14%) ÷ (F3+F4인원)
    * ... (이하 동일 패턴)
  - 100원 단위 절삭
  - 원천징수 3.3% 적용

6. 지급 프로세스
================================================================================

6.1 매출 발생 (N월)
  - N월 말 총매출 집계
  - 현재 등급별 인원 확인
  - 개인별 지급액 계산 및 확정

6.2 지급 계획 생성
  - UserPaymentPlan 문서 생성
  - 10회차 분할 스케줄 설정
  - 매출 시점 등급으로 고정 (이후 변경 불가)

6.3 지급 실행 (N+1월부터)
  - 매주 해당 회차 지급
  - status: "pending" → "paid" 변경
  - WeeklyPayment 기록 생성
  - 10주간 연속 지급 (약 2.5개월)

6.4 중첩 지급
  - 여러 매출월의 회차가 동시 지급
  - 예: 10월 1주 = 7월 7회차 + 8월 3회차 + 9월 1회차

7. 트리 구조 추출 최적화
================================================================================

7.1 전체 로드 방식
  - 재귀적 개별 조회 대신 전체 사용자 한 번에 로드
  - Map 자료구조로 빠른 검색
  - 메모리에서 트리 구성

7.2 캐싱 전략
  - 트리 구조 메모리 캐싱 (TTL: 1분)
  - 자주 조회되는 트리 미리 계산

7.3 API 제공
  - /api/tree (관리자 기준 전체 트리)
  - /api/tree/:userId (특정 사용자 기준 하위 트리)

8. 성능 최적화 인덱스
================================================================================

8.1 users 컬렉션
  - loginId: 1 (unique)
  - parentId: 1
  - grade: 1
  - leftChildId: 1, rightChildId: 1

8.2 userpaymentplans 컬렉션
  - userId: 1, revenueMonth: 1 (compound)
  - payments.scheduledWeek: 1, payments.status: 1

8.3 weeklypayments 컬렉션
  - week: 1, userId: 1
  - userId: 1

9. 핵심 원칙
================================================================================

9.1 데이터 무결성
  - 이진트리 구조 엄격 유지
  - 부모-자식 관계 일관성
  - 매출 시점 등급 고정

9.2 성능 우선
  - 배치 처리 우선
  - 메모리 계산 활용
  - 적절한 캐싱

9.3 추적 가능성
  - 모든 지급 내역 기록
  - 상태 변경 이력 관리
  - 감사 추적 가능